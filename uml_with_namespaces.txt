@startuml
namespace game {
abstract        Entity {
  # string name;
  # int maxHealth;
  # int currentHealth;
  # int damageOutput;
  # int accuracy;
  + void attack(Entity&);
}
abstract        Enemy
class           Player {
  - Weapon weapon;
  + void equipWeapon(Weapon&);
}
class           Spider
class           Skeleton
abstract 	Item {
  # string name;
}
class 		Weapon {
  - int damageOutput;
  - int accuracy;
}
class 		Consumable {
  + function<void(void)> callback;
}
class           Room {
  + bool visited;
  - const string backgroundImage;
  - const string name;
  - Enemy enemy;
}
class 		EnemyFactory {
  + enum class EnemyType;
  + {static} Enemy generateEnemy(EnemyType);
}
class 		ItemFactory {
  + enum class WeaponType;
  + enum class ConsumableType;
  + {static} Item generateWeapon(WeaponType);
  + {static} Item generateConsumable(ConsumableType);
}
class 		RoomFactory {
  + enum class RoomType;
  + {static} Room generateRoom(RoomType);
}
class           DungeonLayout {
  + map<int, room> generateDungeon();
  - void addPossiblePositions();
  - void getRandomNextPosition();
}

Entity <|-- Enemy
Entity <|-- Player
Enemy <|-- Spider
Enemy <|-- Skeleton
Item <|-- Weapon
Item <|-- Consumable
DungeonLayout "1" o-- "many" Room : contains
Room "1" o-- "0-1" Enemy : contains
Player "1" o-- "1" Weapon : has

}
namespace gui {
class           DungeonMap {
  + void draw();
  - map<int, Room> roomMap;
}
class 		Inventory {
  + draw();
  + void putItem(Item);
  - vector<Item> items;
  - Player &player;
}
class 		EventWindow {
  + draw();
  - string EventText;
  - Button button1;
  - Button button2;
}
class           GameScene {
  + void display();
  - vector<Button> buttons;
}
class           Button {
  + void render();
  + void clicked();
}

GameScene "1" *-- "many" Button : contains
GameScene "1" o-- "1" game.DungeonLayout
GameScene "1" o-- "1" DungeonMap
DungeonMap "1" o-- "many" game.Room : contains
Inventory "1" o-- "many" game.Item : contains
}
@enduml